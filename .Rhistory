y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train ,], y[ train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
mean((lasso$pred -y.test)^2)
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "auto") +
geom_abline(intercept = 0, colour = "red", size = 2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "auto") +
geom_abline(intercept = 0, colour = "red", size = 2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
View(dataset)
[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)
yelpdata$stars <- as.numeric(as.character(yelpdata$stars))
yelpdata$reviewcount <- as.numeric(as.character(yelpdata$reviewcount))
names(yelpdata)[names(yelpdata)=="attributeshappyhour"] <- "happyhour"
names(yelpdata)[names(yelpdata)=="attributesacceptscreditcards"] <- "acc"
names(yelpdata)[names(yelpdata)=="attributesgoodforgroups"] <- "groups"
names(yelpdata)[names(yelpdata)=="attributesoutdoorseating"] <- "outdoor"
names(yelpdata)[names(yelpdata)=="attributespricerange"] <- "price"
names(yelpdata)[names(yelpdata)=="attributesalcohol"] <- "alcohol"
names(yelpdata)[names(yelpdata)=="attributesnoiselevel"] <- "noiselevel"
names(yelpdata)[names(yelpdata)=="attributesambienceclassy"] <- "classy"
names(yelpdata)[names(yelpdata)=="attributesparkingvalet"] <- "valet"
names(yelpdata)[names(yelpdata)=="neighborhoods"] <- "nhood"
names(yelpdata)[names(yelpdata)=="attributesdrivethru"] <- "drivethru"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"
load("yelpdata.rdata")
#Clean data.
clean.names <- function(df){
colnames(df) <- gsub("[^[:alnum:]]", "", colnames(df))
colnames(df) <- tolower(colnames(df))
return(df)
}
yelpdata <- clean.names(yelpdata)
yelpdata <- yelpdata[,!duplicated(colnames(yelpdata))]
# Modify data.
yelpdata$stars <- as.numeric(as.character(yelpdata$stars))
yelpdata$reviewcount <- as.numeric(as.character(yelpdata$reviewcount))
names(yelpdata)[names(yelpdata)=="attributeshappyhour"] <- "happyhour"
names(yelpdata)[names(yelpdata)=="attributesacceptscreditcards"] <- "acc"
names(yelpdata)[names(yelpdata)=="attributesgoodforgroups"] <- "groups"
names(yelpdata)[names(yelpdata)=="attributesoutdoorseating"] <- "outdoor"
names(yelpdata)[names(yelpdata)=="attributespricerange"] <- "price"
names(yelpdata)[names(yelpdata)=="attributesalcohol"] <- "alcohol"
names(yelpdata)[names(yelpdata)=="attributesnoiselevel"] <- "noiselevel"
names(yelpdata)[names(yelpdata)=="attributesambienceclassy"] <- "classy"
names(yelpdata)[names(yelpdata)=="attributesparkingvalet"] <- "valet"
names(yelpdata)[names(yelpdata)=="neighborhoods"] <- "nhood"
names(yelpdata)[names(yelpdata)=="attributesdrivethru"] <- "drivethru"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"
# Change <NA> to "dnr" (did not respond).
addDNR <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "dnr")))
return(x)
}
yelpdata <- as.data.frame(lapply(yelpdata, addDNR))
yelpdata[is.na(yelpdata)] <- "dnr"
# Make city/state column to consolidate and clarify vague city and state labels.
yelpdata <- mutate(yelpdata, loc = ifelse(yelpdata$state=="NV", "Las Vegas, NV",
ifelse(yelpdata$state=="PA", "Pittsburg, PA",
ifelse(yelpdata$state=="NC", "Charlotte, NC",
ifelse(yelpdata$state=="AZ", "Phoenix, AZ",
ifelse(yelpdata$state=="IL", "Urbana-Champaign, IL",
ifelse(yelpdata$state=="WI", "Madison, WI",
ifelse(yelpdata$state=="MLN", "Edinburgh, UK",
ifelse(yelpdata$state=="BW", "Karlsruhe, Germany",
ifelse(yelpdata$state=="QC", "Montreal, Canada",
ifelse(yelpdata$state=="ON", "Waterloo, Canada",
ifelse(yelpdata$state=="SC", "Fort Mill, SC",
ifelse(yelpdata$state=="EDH", "Edinburgh, UK",
ifelse(yelpdata$state=="KHL", "Edinburgh, UK",
ifelse(yelpdata$state=="XGL", "Edinburgh, UK",
ifelse(yelpdata$state=="NTH", "Edinburgh, UK",
ifelse(yelpdata$state=="SCB", "Edinburgh, UK",
NA)))))))))))))))))
chinese <- filter(yelpdata, categories1 == "Chinese" & categories2 == "Restaurants")
all_restaurants <- filter(yelpdata, categories == "Restaurants" |
categories1 == "Restaurants" |
categories2 == "Restaurants"|
categories3 == "Restaurants"|
categories4 == "Restaurants"|
categories5 == "Restaurants"|
categories6 == "Restaurants"|
categories7 == "Restaurants")
dataset <- all_restaurants %>%
select(stars,
categories1,
categories2,
categories3,
categories4,
categories5,
categories6,
categories7,
city,
price,
alcohol,
noiselevel,
classy,
valet,
cash,
nhood,
drivethru,
parkinglot
)
# LASSO
x <- model.matrix(stars ~ ., data = dataset)[,-1]
y <- dataset$stars
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
test <- (-train)
y.train <- y[train]
y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train ,], y[ train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
mean((lasso$pred -y.test)^2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2) +
out <- glmnet(x, y, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=bestlam) [1:300,]
lasso.coef
sum(lasso.coef)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"attributesambiencecasual  attributesgoodfordancing	attributesdelivery	attributescoatcheck	attributessmoking	attributestakeout	attributestakesreservations	attributeswaiterservice	attributeswifi	attributescaters	attributesgoodfordessert	attributesgoodforlatenight	attributesgoodforlunch	attributesgoodfordinner	attributesgoodforbreakfast	attributesgoodforbrunch	attributesparkinggarage	attributesparkingstreet	attributesparkingvalidated
names(yelpdata)[names(yelpdata)=="attributesambiencecasual"] <- "casual"
names(yelpdata)[names(yelpdata)=="attributesgoodfordancing"] <- "dance"
names(yelpdata)[names(yelpdata)=="attributesdelivery"] <- "delivery"
names(yelpdata)[names(yelpdata)=="attributescoatcheck"] <- "ccheck"
names(yelpdata)[names(yelpdata)=="attributestakeout"] <- "takeout"
names(yelpdata)[names(yelpdata)=="attributestakesreservations"] <- "res"
names(yelpdata)[names(yelpdata)=="attributeswaiterservice  "] <- "service"
names(yelpdata)[names(yelpdata)=="attributesparkingstreet"] <- "street"
names(yelpdata)[names(yelpdata)=="attributesparkinggarage"] <- "garage"
names(yelpdata)[names(yelpdata)=="attributesgoodforlatenight"] <- "late"
names(yelpdata)[names(yelpdata)=="attributesgoodfordessert"] <- "desert"
names(yelpdata)[names(yelpdata)=="attributescaters"] <- "caters"
names(yelpdata)[names(yelpdata)=="attributeswifi"] <- "wifi"
# Change <NA> to "dnr" (did not respond).
addDNR <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "dnr")))
return(x)
}
yelpdata <- as.data.frame(lapply(yelpdata, addDNR))
yelpdata[is.na(yelpdata)] <- "dnr"
# Make city/state column to consolidate and clarify vague city and state labels.
yelpdata <- mutate(yelpdata, loc = ifelse(yelpdata$state=="NV", "Las Vegas, NV",
ifelse(yelpdata$state=="PA", "Pittsburg, PA",
ifelse(yelpdata$state=="NC", "Charlotte, NC",
ifelse(yelpdata$state=="AZ", "Phoenix, AZ",
ifelse(yelpdata$state=="IL", "Urbana-Champaign, IL",
ifelse(yelpdata$state=="WI", "Madison, WI",
ifelse(yelpdata$state=="MLN", "Edinburgh, UK",
ifelse(yelpdata$state=="BW", "Karlsruhe, Germany",
ifelse(yelpdata$state=="QC", "Montreal, Canada",
ifelse(yelpdata$state=="ON", "Waterloo, Canada",
ifelse(yelpdata$state=="SC", "Fort Mill, SC",
ifelse(yelpdata$state=="EDH", "Edinburgh, UK",
ifelse(yelpdata$state=="KHL", "Edinburgh, UK",
ifelse(yelpdata$state=="XGL", "Edinburgh, UK",
ifelse(yelpdata$state=="NTH", "Edinburgh, UK",
ifelse(yelpdata$state=="SCB", "Edinburgh, UK",
NA)))))))))))))))))
chinese <- filter(yelpdata, categories1 == "Chinese" & categories2 == "Restaurants")
all_restaurants <- filter(yelpdata, categories == "Restaurants" |
categories1 == "Restaurants" |
categories2 == "Restaurants"|
categories3 == "Restaurants"|
categories4 == "Restaurants"|
categories5 == "Restaurants"|
categories6 == "Restaurants"|
categories7 == "Restaurants")
dataset <- all_restaurants %>%
select(stars,
categories1,
categories2,
categories3,
categories4,
categories5,
categories6,
categories7,
city,
price,
alcohol,
noiselevel,
classy,
valet,
cash,
nhood,
drivethru,
parkinglot,
casual,
dance,
delivery,
ccheck,
takeout,
res,
service,
street,
garage,
late,
desert,
caters,
wifi
)
names(yelpdata)[names(yelpdata)=="attributeswaiterservice"] <- "service"
dataset <- all_restaurants %>%
select(stars,
categories1,
categories2,
categories3,
categories4,
categories5,
categories6,
categories7,
city,
price,
alcohol,
noiselevel,
classy,
valet,
cash,
nhood,
drivethru,
parkinglot,
casual,
dance,
delivery,
ccheck,
takeout,
res,
service,
street,
garage,
late,
desert,
caters,
wifi
)
# Load the data.
load("yelpdata.rdata")
#Clean data.
clean.names <- function(df){
colnames(df) <- gsub("[^[:alnum:]]", "", colnames(df))
colnames(df) <- tolower(colnames(df))
return(df)
}
yelpdata <- clean.names(yelpdata)
yelpdata <- yelpdata[,!duplicated(colnames(yelpdata))]
# Modify data.
yelpdata$stars <- as.numeric(as.character(yelpdata$stars))
yelpdata$reviewcount <- as.numeric(as.character(yelpdata$reviewcount))
names(yelpdata)[names(yelpdata)=="attributeshappyhour"] <- "happyhour"
names(yelpdata)[names(yelpdata)=="attributesacceptscreditcards"] <- "acc"
names(yelpdata)[names(yelpdata)=="attributesgoodforgroups"] <- "groups"
names(yelpdata)[names(yelpdata)=="attributesoutdoorseating"] <- "outdoor"
names(yelpdata)[names(yelpdata)=="attributespricerange"] <- "price"
names(yelpdata)[names(yelpdata)=="attributesalcohol"] <- "alcohol"
names(yelpdata)[names(yelpdata)=="attributesnoiselevel"] <- "noiselevel"
names(yelpdata)[names(yelpdata)=="attributesambienceclassy"] <- "classy"
names(yelpdata)[names(yelpdata)=="attributesparkingvalet"] <- "valet"
names(yelpdata)[names(yelpdata)=="neighborhoods"] <- "nhood"
names(yelpdata)[names(yelpdata)=="attributesdrivethru"] <- "drivethru"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"
names(yelpdata)[names(yelpdata)=="attributesambiencecasual"] <- "casual"
names(yelpdata)[names(yelpdata)=="attributesgoodfordancing"] <- "dance"
names(yelpdata)[names(yelpdata)=="attributesdelivery"] <- "delivery"
names(yelpdata)[names(yelpdata)=="attributescoatcheck"] <- "ccheck"
names(yelpdata)[names(yelpdata)=="attributestakeout"] <- "takeout"
names(yelpdata)[names(yelpdata)=="attributestakesreservations"] <- "res"
names(yelpdata)[names(yelpdata)=="attributeswaiterservice"] <- "service"
names(yelpdata)[names(yelpdata)=="attributesparkingstreet"] <- "street"
names(yelpdata)[names(yelpdata)=="attributesparkinggarage"] <- "garage"
names(yelpdata)[names(yelpdata)=="attributesgoodforlatenight"] <- "late"
names(yelpdata)[names(yelpdata)=="attributesgoodfordessert"] <- "desert"
names(yelpdata)[names(yelpdata)=="attributescaters"] <- "caters"
names(yelpdata)[names(yelpdata)=="attributeswifi"] <- "wifi"
# Change <NA> to "dnr" (did not respond).
addDNR <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "dnr")))
return(x)
}
yelpdata <- as.data.frame(lapply(yelpdata, addDNR))
yelpdata[is.na(yelpdata)] <- "dnr"
# Make city/state column to consolidate and clarify vague city and state labels.
yelpdata <- mutate(yelpdata, loc = ifelse(yelpdata$state=="NV", "Las Vegas, NV",
ifelse(yelpdata$state=="PA", "Pittsburg, PA",
ifelse(yelpdata$state=="NC", "Charlotte, NC",
ifelse(yelpdata$state=="AZ", "Phoenix, AZ",
ifelse(yelpdata$state=="IL", "Urbana-Champaign, IL",
ifelse(yelpdata$state=="WI", "Madison, WI",
ifelse(yelpdata$state=="MLN", "Edinburgh, UK",
ifelse(yelpdata$state=="BW", "Karlsruhe, Germany",
ifelse(yelpdata$state=="QC", "Montreal, Canada",
ifelse(yelpdata$state=="ON", "Waterloo, Canada",
ifelse(yelpdata$state=="SC", "Fort Mill, SC",
ifelse(yelpdata$state=="EDH", "Edinburgh, UK",
ifelse(yelpdata$state=="KHL", "Edinburgh, UK",
ifelse(yelpdata$state=="XGL", "Edinburgh, UK",
ifelse(yelpdata$state=="NTH", "Edinburgh, UK",
ifelse(yelpdata$state=="SCB", "Edinburgh, UK",
NA)))))))))))))))))
chinese <- filter(yelpdata, categories1 == "Chinese" & categories2 == "Restaurants")
all_restaurants <- filter(yelpdata, categories == "Restaurants" |
categories1 == "Restaurants" |
categories2 == "Restaurants"|
categories3 == "Restaurants"|
categories4 == "Restaurants"|
categories5 == "Restaurants"|
categories6 == "Restaurants"|
categories7 == "Restaurants")
dataset <- all_restaurants %>%
select(stars,
categories1,
categories2,
categories3,
categories4,
categories5,
categories6,
categories7,
city,
price,
alcohol,
noiselevel,
classy,
valet,
cash,
nhood,
drivethru,
parkinglot,
casual,
dance,
delivery,
ccheck,
takeout,
res,
service,
street,
garage,
late,
desert,
caters,
wifi
)
# LASSO
x <- model.matrix(stars ~ ., data = dataset)[,-1]
y <- dataset$stars
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
test <- (-train)
y.train <- y[train]
y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train ,], y[ train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
mean((lasso$pred -y.test)^2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
out <- glmnet(x, y, alpha=1, lambda=grid)
lasso.coef <- predict(out, type="coefficients", s=bestlam) [1:300,]
lasso.coef
sum(lasso.coef)
max(lasso.coef)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
lasso
x <- model.matrix(stars ~ ., data = dataset)[,-1]
y <- dataset$stars
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
test <- (-train)
y.train <- y[train]
y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train ,], y[ train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
mean((lasso$pred -y.test)^2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
tail(sort(lasso.coef,10))
lasso.coef
tail(sort(lasso.coef),10)
tail(sort(lasso.coef),10)[max(lasso.coef)]
tail(sort(lasso.coef),10)[! max(lasso.coef)]
! max(lasso.coef)
tail(sort(lasso.coef),10)[!max(lasso.coef)]
tail(sort(lasso.coef),10)[! max(lasso.coef)]
tail(sort(lasso.coef),10)[max(lasso.coef)]
max(lasso.coef)
tail(sort(lasso.coef),10)
tail(sort(lasso.coef),20)
sort(lasso.coef)
tail(sort(abs(lasso.coef)),20)
tail(sort(lasso.coef),10)
head(sort(lasso.coef),10)
head(sort(lasso.coef),7)
tail(sort(lasso.coef),15)
tail(sort(lasso.coef),14)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2)
ggplot(lasso, aes(y.act, pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2) +
coord_cartesian(ylim = c(1,5))
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "red", size = 2) +
coord_cartesian(ylim = c(1,5))
tail(sort(lasso.coef),14)
head(sort(lasso.coef),7)
plot(lasso.mod)
mean((lasso$pred -y.test)^2)
View(all_restaurants)
View(all_restaurants)
library(googleVis)
all_restaurants$latlong<-paste(all_restaurants$lat, all_restaurants$long, sep=":")
require(datasets)
View(all_restaurants)
GeoMarker <- gvisGeoMap(all_restaurants,
locationvar = "latlong",
#numvar = "count",
hovervar = "loc",
options=list(region="US",
dataMode = "Markers",
width=900, height=600))
print(GeoMarker, "chart")
all_restaurants$count <- group_by(loc) %>%
summarize(all_restaurants, count = n())
all_restaurants$count <- all_restaurants %>%
group_by(loc) %>%
summarize(all_restaurants, count = n())
counts <- all_restaurants %>%
group_by(loc) %>%
summarize(all_restaurants, count = n())
counts <- all_restaurants %>%
group_by(loc) %>%
summarize(count = n())
counts
all_restaurants <- left_join(all_restaurants, counts, by="loc")
