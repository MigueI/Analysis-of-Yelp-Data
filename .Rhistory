takeout,
res,
service,
street,
garage,
late,
desert,
caters,
wifi,
goodforkids,
tv,
romantic,
trendy,
upscale,
divey,
wheelchair,
bkgmusic,
livemusic,
byob,
dogsallowed,
open24hrs,
amex,
orderatcounter,
visa
)
dataset <- left_join(dataset, all_restaurants[c(1,119:(length(all_restaurants)-1))], by = "businessid")
dataset <- subset(dataset, select = -businessid)
# Define make predictors into a matrix.
x <- model.matrix(stars ~ ., data = dataset)[,-1]
y <- dataset$stars
# Define training and test sets.
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
test <- (-train)
y.train <- y[train]
y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
# Train the LASSO model. Make plot of coefficients for increasing "s".
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
# mean((lasso$pred -y.test)^2)
# Plot of actual vs. predicted values for the test data set.
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "#c41200", size = 2) +
coord_cartesian(ylim = c(1,5)) +
xlab("Actual Star Ratings") +
ylab("Predicted Star Ratings")
ggplot(lasso, aes(pred)) + geom_histogram()
ggplot(lasso, aes(pred)) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
theme_classic()
ggplot(lasso, aes(pred)) +
geom_histogram(fill = "#c41200", col="black", binwidth=0.5) +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
theme_classic()
round(pred*2)/2
round(lasso$pred*2)/2
ggplot(lasso, aes(round(pred*2)/2) +
geom_histogram(fill = "#c41200", col="black", binwidth=0.5) +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
theme_classic()
)
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(1,5))
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(1,5)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(0,6)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(0,10)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(0,7)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(-1,7)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(-1,8)) +
theme_classic()
ggplot(lasso, aes(as.factor(round(pred*2)/2))) +
geom_histogram(fill = "#c41200", col="black") +
xlab("Predicted Stars") +
ylab("Number of Restaurants") +
coord_cartesian(xlim=c(-1,7.5)) +
theme_classic()
View(yelpdata)
View(all_restaurants)
load("yelpdata.rdata")
all_restaurants <- filter(yelpdata, categories == "Restaurants" |
categories1 == "Restaurants" |
categories2 == "Restaurants"|
categories3 == "Restaurants"|
categories4 == "Restaurants"|
categories5 == "Restaurants"|
categories6 == "Restaurants"|
categories7 == "Restaurants"|
categories8 == "Restaurants"|
categories9 == "Restaurants"|
categories10 == "Restaurants")
setwd("~/Desktop/Analysis-of-Yelp-Data")
View(yelpdata)
all_restaurants
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(glmnet)
library(googleVis)
library(DT)
library(scales)
# Load the data.
load("yelpdata.rdata")
#Clean data.
clean.names <- function(df){
colnames(df) <- gsub("[^[:alnum:]]", "", colnames(df))
colnames(df) <- tolower(colnames(df))
return(df)
}
yelpdata <- clean.names(yelpdata)
yelpdata <- yelpdata[,!duplicated(colnames(yelpdata))]
# Modify data.
yelpdata$stars <- as.numeric(as.character(yelpdata$stars))
yelpdata$reviewcount <- as.numeric(as.character(yelpdata$reviewcount))
names(yelpdata)[names(yelpdata)=="attributeshappyhour"] <- "happyhour"
names(yelpdata)[names(yelpdata)=="attributesacceptscreditcards"] <- "acc"
names(yelpdata)[names(yelpdata)=="attributesgoodforgroups"] <- "groups"
names(yelpdata)[names(yelpdata)=="attributesoutdoorseating"] <- "outdoor"
names(yelpdata)[names(yelpdata)=="attributespricerange"] <- "price"
names(yelpdata)[names(yelpdata)=="attributesalcohol"] <- "alcohol"
names(yelpdata)[names(yelpdata)=="attributesnoiselevel"] <- "noiselevel"
names(yelpdata)[names(yelpdata)=="attributesambienceclassy"] <- "classy"
names(yelpdata)[names(yelpdata)=="attributesparkingvalet"] <- "valet"
names(yelpdata)[names(yelpdata)=="neighborhoods"] <- "nhood"
names(yelpdata)[names(yelpdata)=="attributesdrivethru"] <- "drivethru"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributesparkinglot"] <- "parkinglot"
names(yelpdata)[names(yelpdata)=="attributespaymenttypescashonly"] <- "cash"
names(yelpdata)[names(yelpdata)=="attributesambiencecasual"] <- "casual"
names(yelpdata)[names(yelpdata)=="attributesgoodfordancing"] <- "dance"
names(yelpdata)[names(yelpdata)=="attributesdelivery"] <- "delivery"
names(yelpdata)[names(yelpdata)=="attributescoatcheck"] <- "ccheck"
names(yelpdata)[names(yelpdata)=="attributestakeout"] <- "takeout"
names(yelpdata)[names(yelpdata)=="attributestakesreservations"] <- "res"
names(yelpdata)[names(yelpdata)=="attributeswaiterservice"] <- "service"
names(yelpdata)[names(yelpdata)=="attributesparkingstreet"] <- "street"
names(yelpdata)[names(yelpdata)=="attributesparkinggarage"] <- "garage"
names(yelpdata)[names(yelpdata)=="attributesgoodforlatenight"] <- "late"
names(yelpdata)[names(yelpdata)=="attributesgoodfordessert"] <- "desert"
names(yelpdata)[names(yelpdata)=="attributescaters"] <- "caters"
names(yelpdata)[names(yelpdata)=="attributeswifi"] <- "wifi"
names(yelpdata)[names(yelpdata)=="attributesattire"] <- "attire"
names(yelpdata)[names(yelpdata)=="attributesgoodforkids"] <- "goodforkids"
names(yelpdata)[names(yelpdata)=="attributeshastv"] <- "tv"
names(yelpdata)[names(yelpdata)=="attributesambienceromantic"] <- "romantic"
names(yelpdata)[names(yelpdata)=="attributesambiencetrendy"] <- "trendy"
names(yelpdata)[names(yelpdata)=="attributesambienceupscale"] <- "upscale"
names(yelpdata)[names(yelpdata)=="attributesambiencedivey"] <- "divey"
names(yelpdata)[names(yelpdata)=="attributeswheelchairaccessible"] <- "wheelchair"
names(yelpdata)[names(yelpdata)=="attributesmusicbackgroundmusic"] <- "bkgmusic"
names(yelpdata)[names(yelpdata)=="attributesmusiclive"] <- "livemusic"
names(yelpdata)[names(yelpdata)=="attributesbyob"] <- "byob"
names(yelpdata)[names(yelpdata)=="attributesdogsallowed"] <- "dogsallowed"
names(yelpdata)[names(yelpdata)=="attributesopen24hours"] <- "open24hrs"
names(yelpdata)[names(yelpdata)=="attributespaymenttypesamex"] <- "amex"
names(yelpdata)[names(yelpdata)=="attributesorderatcounter"] <- "orderatcounter"
names(yelpdata)[names(yelpdata)=="attributespaymenttypesvisa"] <- "visa"
# Change <NA> to "dnr" (did not respond).
addDNR <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "dnr")))
return(x)
}
yelpdata <- as.data.frame(lapply(yelpdata, addDNR))
yelpdata[is.na(yelpdata)] <- "dnr"
# Make city/state column to consolidate and clarify vague city and state labels.
yelpdata <- mutate(yelpdata, loc = ifelse(yelpdata$state=="NV", "Las Vegas, NV",
ifelse(yelpdata$state=="PA", "Pittsburg, PA",
ifelse(yelpdata$state=="NC", "Charlotte, NC",
ifelse(yelpdata$state=="AZ", "Phoenix, AZ",
ifelse(yelpdata$state=="IL", "Urbana-Champaign, IL",
ifelse(yelpdata$state=="WI", "Madison, WI",
ifelse(yelpdata$state=="MLN", "Edinburgh, UK",
ifelse(yelpdata$state=="BW", "Karlsruhe, Germany",
ifelse(yelpdata$state=="QC", "Montreal, Canada",
ifelse(yelpdata$state=="ON", "Waterloo, Canada",
ifelse(yelpdata$state=="SC", "Charlotte, NC",
ifelse(yelpdata$state=="EDH", "Edinburgh, UK",
ifelse(yelpdata$state=="KHL", "Edinburgh, UK",
ifelse(yelpdata$state=="XGL", "Edinburgh, UK",
ifelse(yelpdata$state=="NTH", "Edinburgh, UK",
ifelse(yelpdata$state=="SCB", "Edinburgh, UK",
NA)))))))))))))))))
# Pick out the restaurants.
all_restaurants <- filter(yelpdata, categories == "Restaurants" |
categories1 == "Restaurants" |
categories2 == "Restaurants"|
categories3 == "Restaurants"|
categories4 == "Restaurants"|
categories5 == "Restaurants"|
categories6 == "Restaurants"|
categories7 == "Restaurants"|
categories8 == "Restaurants"|
categories9 == "Restaurants"|
categories10 == "Restaurants")
# Display all of the categories of a restaurants from all of the seven columns.
bigcat <- c(as.character(all_restaurants$categories1),
as.character(all_restaurants$categories2),
as.character(all_restaurants$categories3),
as.character(all_restaurants$categories4),
as.character(all_restaurants$categories5),
as.character(all_restaurants$categories6),
as.character(all_restaurants$categories7),
as.character(all_restaurants$categories8),
as.character(all_restaurants$categories9),
as.character(all_restaurants$categories10),
as.character(all_restaurants$categories)) %>%
table() %>%
sort()
# Pick the 60 most important categories.
# tail(bigcat,65)
# This function creates a column for a category, 1 = yes, 0 = no.
varmaker <- function(x){
all_restaurants <- mutate(all_restaurants,
a =
ifelse(
categories == x |
categories1 == x |
categories2 == x |
categories3 == x |
categories4 == x |
categories5 == x |
categories6 == x |
categories7 == x |
categories8 == x |
categories9 == x |
categories10 == x , 1, 0) )
all_restaurants$a <- as.factor(all_restaurants$a)
names(all_restaurants)[names(all_restaurants)=="a"] <- gsub(" ", "", x, fixed = TRUE)
return(all_restaurants)
}
# Make the new columns.
all_restaurants <- varmaker("Fast Food")
all_restaurants <- varmaker("Pizza")
all_restaurants <- varmaker("Mexican")
all_restaurants <- varmaker("American (Traditional)")
all_restaurants <- varmaker("Nightlife")
all_restaurants <- varmaker("Sandwiches")
all_restaurants <- varmaker("Bars")
all_restaurants <- varmaker("Food")
all_restaurants <- varmaker("Italian")
all_restaurants <- varmaker("Chinese")
all_restaurants <- varmaker("American (New)")
all_restaurants <- varmaker("Burgers")
all_restaurants <- varmaker("Breakfast & Brunch")
all_restaurants <- varmaker("Cafes")
all_restaurants <- varmaker("Japanese")
all_restaurants <- varmaker("Sushi Bars")
all_restaurants <- varmaker("Delis")
all_restaurants <- varmaker("Steakhouses")
all_restaurants <- varmaker("Seafood")
all_restaurants <- varmaker("Chicken Wings")
all_restaurants <- varmaker("Sports Bars")
all_restaurants <- varmaker("Coffee & Tea")
all_restaurants <- varmaker("Mediterranean")
all_restaurants <- varmaker("Barbeque")
all_restaurants <- varmaker("Thai")
all_restaurants <- varmaker("Asian Fusion")
all_restaurants <- varmaker("French")
all_restaurants <- varmaker("Buffets")
all_restaurants <- varmaker("Indian")
all_restaurants <- varmaker("Pubs")
all_restaurants <- varmaker("Greek")
all_restaurants <- varmaker("Diners")
all_restaurants <- varmaker("Bakeries")
all_restaurants <- varmaker("Vietnamese")
all_restaurants <- varmaker("Tex-Mex")
all_restaurants <- varmaker("Vegetarian")
all_restaurants <- varmaker("Salad")
all_restaurants <- varmaker("Hot Dogs")
all_restaurants <- varmaker("Middle Eastern")
all_restaurants <- varmaker("Event Planning & Services")
all_restaurants <- varmaker("Specialty Food")
all_restaurants <- varmaker("Lounges")
all_restaurants <- varmaker("Korean")
all_restaurants <- varmaker("Canadian (New)")
all_restaurants <- varmaker("Arts & Entertainment")
all_restaurants <- varmaker("Wine Bars")
all_restaurants <- varmaker("Gluten-Free")
all_restaurants <- varmaker("Latin American")
all_restaurants <- varmaker("British")
all_restaurants <- varmaker("Gastropubs")
all_restaurants <- varmaker("Ice Cream & Frozen Yogurt")
all_restaurants <- varmaker("Southern")
all_restaurants <- varmaker("Vegan")
all_restaurants <- varmaker("Desserts")
all_restaurants <- varmaker("Hawaiian")
all_restaurants <- varmaker("German")
all_restaurants <- varmaker("Bagels")
all_restaurants <- varmaker("Caterers")
all_restaurants <- varmaker("Juice Bars & Smoothies")
all_restaurants <- varmaker("Fish & Chips")
all_restaurants <- varmaker("Ethnic Food")
all_restaurants <- varmaker("Tapas Bars")
all_restaurants <- varmaker("Soup")
all_restaurants <- varmaker("Halal")
# Make dataset with predictors.
dataset <- all_restaurants %>%
select(businessid,
stars,
city,
price,
alcohol,
noiselevel,
classy,
valet,
cash,
nhood,
drivethru,
parkinglot,
casual,
dance,
delivery,
ccheck,
takeout,
res,
service,
street,
garage,
late,
desert,
caters,
wifi,
goodforkids,
tv,
romantic,
trendy,
upscale,
divey,
wheelchair,
bkgmusic,
livemusic,
byob,
dogsallowed,
open24hrs,
amex,
orderatcounter,
visa
)
dataset <- left_join(dataset, all_restaurants[c(1,119:(length(all_restaurants)-1))], by = "businessid")
dataset <- subset(dataset, select = -businessid)
# Define make predictors into a matrix.
x <- model.matrix(stars ~ ., data = dataset)[,-1]
y <- dataset$stars
# Define training and test sets.
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
test <- (-train)
y.train <- y[train]
y.test <- y[! (1:nrow(x)) %in% train]
grid=10^seq(10,-2, length =100)
# Train the LASSO model. Make plot of coefficients for increasing "s".
lasso.mod <- glmnet(x[train,], y[train], alpha=1, lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out <- cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam <- cv.out$lambda.min
lasso <- data.frame(y.act = y.test)
lasso$y.act <- lasso$y.act %>%
as.character() %>%
as.numeric()
lasso$pred <- predict(lasso.mod, s=bestlam, newx=x[test,])  %>%
as.character() %>%
as.numeric()
# mean((lasso$pred -y.test)^2)
# Plot of actual vs. predicted values for the test data set.
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "#c41200", size = 2) +
coord_cartesian(ylim = c(1,5)) +
xlab("Actual Star Ratings") +
ylab("Predicted Star Ratings")
1-(mean((lasso$pred -y.test)^2)/var(lasso$pred))
(mean((lasso$pred -y.test)^2)/var(lasso$pred))
var(lasso$pred)
1-(mean((lasso$pred -y.test)^2)/var(y.test))
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, colour = "#c41200", size = 2) +
coord_cartesian(ylim = c(1,5)) +
xlab("Actual Star Ratings") +
ylab("Predicted Star Ratings") +
theme_classic()
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm", colour = "#c41200") +
geom_abline(intercept = 0, colour = "#c41200", size = 2) +
coord_cartesian(ylim = c(1,5)) +
xlab("Actual Star Ratings") +
ylab("Predicted Star Ratings") +
theme_classic()
plot(cv.out)
plot(cv.out, col = "#c41200")
plot(cv.out, col = "#c41200")
plot(cv.out, col = "#c41200")
plot(cv.out, col = "black")
plot(cv.out, col = "#c41200")
plot(cv.out, bkg = "#c41200")
plot(cv.out, bg = "#c41200")
warnings()
plot(cv.out, bg = "#c41200")
plot(cv.out, color = "#c41200")
plot(cv.out, col = "#c41200")
warnings()
plot(cv.out, col = "#c41200")
cv.out
ggplot(cv.out, aes()) + geom_point()
ggplot(cv.out, aes(Lambda )) + geom_point()
cv.out <- cv.glmnet(x[train,], y[train], alpha=1, coldata = "#c41200")
plot(cv.out)
cv.out <- cv.glmnet(x[train,], y[train], alpha=1, matplotCols = "#c41200")
plot.cv.glmnet(cv.out)
plot.cv.glmnet(cv.out, matplotCols = "#c41200")
plot.cv.glmnet(cv.out, col = "#c41200")
plot.cv.glmnet(cv.out, col = "#c41200")
plot.cv.glmnet(cv.out, coldata = "#c41200")
plot.cv.glmnet(cv.out, coldata = "#c41200")
matplotCols = "#c41200"
bestlam <- cv.out$lambda.min
?plot.cv.glmnet
?plot.cv.glmnet(cv.out)
plot.cv.glmnet(cv.out)
plot.cv.glmnet(cv.out, col="#c41200")
plot.cv.glmnet(cv.out, col="#c41200")
plot.cv.glmnet(cv.out, col="#c41200")
plot.cv.glmnet(cv.out, col="#c41200")
plot.cv.glmnet(cv.out, centercolor="#c41200")
plot.cv.glmnet(cv.out, centercolor="#c41200")
plot.glmnet(cv.out, centercolor="#c41200")
bestlam <- cv.out$lambda.min
plot.glmnet(cv.out, centercolor="#c41200")
plot.cv.glmnet(cv.out, centercolor="#c41200")
plotex(cv.out, centercolor="#c41200")
plot.cv.glmnet(cv.out)
plot.cv.glmnet(cv.out, errorbarcol ="#c41200")
plot.cv.glmnet(cv.out, errorbarcol ="#c41200")
plot.cv.glmnet(cv.out, errbarcol ="#c41200")
plot.cv.glmnet(cv.out, errbarcol ="#c41200")
plot.cv.glmnet(cv.out)
plot.cv.glmnet(cv.out)
ggplot(lasso, aes(jitter(y.act), pred)) +
geom_point() +
geom_smooth(method = "lm", col = "#c41200") +
geom_abline(intercept = 0, col = "#c41200", size = 2) +
coord_cartesian(ylim = c(1,5)) +
xlab("Actual Star Ratings") +
ylab("Predicted Star Ratings") +
theme_classic()
plot.cv.glmnet(cv.out)
datatable(lasso.coef, options=list(pageLength=5))
print(gvisMerge(USmap, Europemap, horizontal=FALSE))
plot(gvisMerge(USmap, Europemap, horizontal=FALSE))
gvisMerge(USmap, Europemap, horizontal=FALSE)
